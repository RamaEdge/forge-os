#!/bin/sh
# ForgeOS udhcpc Default Script
# Implements THE-53 (Networking)
# Handles DHCP lease events and configures network

# Script called by udhcpc with the following environment variables:
# $1 - event: deconfig, bound, renew, nak, leasefail
# $interface - network interface (e.g., eth0)
# $ip - assigned IP address
# $subnet - subnet mask
# $router - default gateway
# $dns - DNS servers (space-separated)
# $domain - domain name
# $broadcast - broadcast address
# $lease - lease time in seconds

RESOLV_CONF="/etc/resolv.conf"
RESOLV_BACKUP="/etc/resolv.conf.bak"

log() {
    logger -t udhcpc -p daemon.info "$@"
    echo "udhcpc: $@"
}

# Deconfig: Remove IP configuration
deconfig() {
    log "Deconfiguring interface $interface"
    
    # Bring interface down
    ip addr flush dev "$interface"
    ip link set "$interface" up
    
    # Backup resolv.conf if it exists
    if [ -f "$RESOLV_CONF" ]; then
        cp "$RESOLV_CONF" "$RESOLV_BACKUP"
    fi
}

# Bound: Configure interface with new lease
bound() {
    log "Configuring interface $interface (IP: $ip)"
    
    # Set IP address and netmask
    ip addr add "$ip/${subnet:-255.255.255.0}" dev "$interface"
    
    # Set broadcast if provided
    if [ -n "$broadcast" ]; then
        ip addr add broadcast "$broadcast" dev "$interface"
    fi
    
    # Bring interface up
    ip link set "$interface" up
    
    # Set default route if gateway provided
    if [ -n "$router" ]; then
        log "Setting default gateway: $router"
        # Remove existing default routes
        while ip route del default 2>/dev/null; do
            :
        done
        # Add new default route
        for gw in $router; do
            ip route add default via "$gw" dev "$interface"
            break  # Use only first gateway
        done
    fi
    
    # Configure DNS
    configure_dns
    
    # Set hostname if provided
    if [ -n "$hostname" ]; then
        log "Setting hostname: $hostname"
        hostname "$hostname"
    fi
    
    log "Interface $interface configured successfully"
}

# Renew: Update lease (same as bound)
renew() {
    log "Renewing lease for interface $interface"
    bound
}

# NAK: Negative acknowledgment
nak() {
    log "Received NAK from DHCP server"
    deconfig
}

# Lease failed
leasefail() {
    log "Lease acquisition failed for interface $interface"
}

# Configure DNS resolvers
configure_dns() {
    if [ -z "$dns" ]; then
        log "No DNS servers provided"
        return
    fi
    
    log "Configuring DNS servers: $dns"
    
    # Create resolv.conf
    {
        echo "# ForgeOS DNS Configuration"
        echo "# Generated by udhcpc for $interface"
        echo "# $(date)"
        echo ""
        
        # Add domain if provided
        if [ -n "$domain" ]; then
            echo "domain $domain"
            echo "search $domain"
        fi
        
        # Add DNS servers
        for nameserver in $dns; do
            echo "nameserver $nameserver"
        done
        
        # Add options
        echo ""
        echo "options edns0 trust-ad"
        echo "options timeout:2 attempts:3"
        
    } > "$RESOLV_CONF"
    
    chmod 644 "$RESOLV_CONF"
    log "DNS configuration updated"
}

# Main script logic
case "$1" in
    deconfig)
        deconfig
        ;;
    bound)
        bound
        ;;
    renew)
        renew
        ;;
    nak)
        nak
        ;;
    leasefail)
        leasefail
        ;;
    *)
        log "Unknown event: $1"
        ;;
esac

exit 0

